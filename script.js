document.addEventListener('DOMContentLoaded', () => {
    const tg = window.Telegram.WebApp;
    tg.ready();

    // --- DOM –≠–ª–µ–º–µ–Ω—Ç—ã ---
    const catalogContainer = document.getElementById('product-catalog');
    const loader = document.getElementById('loader');
    const cartButton = document.getElementById('cart-button');
    const cartCounter = document.getElementById('cart-counter');
    const cartModal = document.getElementById('cart-modal');
    const closeCartButton = document.getElementById('close-cart-button');
    const cartItemsContainer = document.getElementById('cart-items-container');
    const cartTotalPriceEl = document.getElementById('cart-total-price');
    const submitOrderButton = document.getElementById('submit-order-button');
    const customerNameInput = document.getElementById('customer-name-input'); // –ù–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –∏–º–µ–Ω–∏
    const phoneInput = document.getElementById('phone-input');
    const addressInput = document.getElementById('address-input');
    const categoriesContainer = document.getElementById('categories-container'); // –ù–æ–≤—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π

    // --- –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
    let cart = []; // –¢–µ–ø–µ—Ä—å –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å –æ–±—ä–µ–∫—Ç—ã { ...product, quantity: N }
    let allProducts = []; // –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
    let currentCategory = '–í—Å–µ —Ç–æ–≤–∞—Ä—ã'; // –¢–µ–∫—É—â–∞—è –∞–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è

    // --- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –∏—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ ---
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ catalog.json
    const categories = [
        { name: '–í—Å–µ —Ç–æ–≤–∞—Ä—ã', icon: '‚ú®', description: '–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã', keywords: [] },
        { name: '–ö—Ä–µ–ø–µ–∂', icon: 'üî®', description: '–®—É—Ä—É–ø—ã, —Å–∞–º–æ—Ä–µ–∑—ã, –≥–≤–æ–∑–¥–∏', keywords: ['—à—É—Ä—É–ø—ã', '—Å–∞–º–æ—Ä–µ–∑—ã', '–≥–≤–æ–∑–¥–∏', '–∞–Ω–∫–µ—Ä', '–ø–µ—Ç–ª–∏', '–∑–∞–º–æ–∫'] },
        { name: '–õ–∞–∫–æ–∫—Ä–∞—Å–æ—á–Ω—ã–µ', icon: 'üé®', description: '–ö—Ä–∞—Å–∫–∏, –≥—Ä—É–Ω—Ç–æ–≤–∫–∏, –∫–ª–µ–∏', keywords: ['–∫—Ä–∞—Å–∫–∞', '–≥—Ä—É–Ω—Ç–æ–≤–∫–∞', '–∫–ª–µ–π', '–≥–µ—Ä–º–µ—Ç–∏–∫', '—ç–º–∞–ª—å', '–ø–µ–Ω–∞ –º–æ–Ω—Ç–∞–∂–Ω–∞—è'] },
        { name: '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã', icon: 'üõ†Ô∏è', description: '–î—Ä–µ–ª–∏, –º–æ–ª–æ—Ç–∫–∏, –æ—Ç–≤–µ—Ä—Ç–∫–∏', keywords: ['–¥—Ä–µ–ª—å', '–±–æ–ª–≥–∞—Ä–∫–∞', '–ø–µ—Ä—Ñ–æ—Ä–∞—Ç–æ—Ä', '–æ—Ç–≤—ë—Ä—Ç–∫–∞', '–º–æ–ª–æ—Ç–æ–∫', '—É—Ä–æ–≤–µ–Ω—å', '–ª–æ–±–∑–∏–∫', '–Ω–∞–∂–¥–∞—á–Ω–∞—è –±—É–º–∞–≥–∞', '—à—É—Ä—É–ø–æ–≤–µ—Ä—Ç', '—Å–≤–µ—Ä–ª–æ', '–∫–∏—Å—Ç—å –º–∞–ª—è—Ä–Ω–∞—è', '–≤–∞–ª–∏–∫'] },
        { name: '–°—Ç—Ä–æ–π–º–∞—Ç–µ—Ä–∏–∞–ª—ã', icon: 'üß±', description: '–¶–µ–º–µ–Ω—Ç, –ø–ª–∏—Ç–∫–∞, –≥–∏–ø—Å–æ–∫–∞—Ä—Ç–æ–Ω', keywords: ['—Ü–µ–º–µ–Ω—Ç', '—à–ø–∞—Ç–ª—ë–≤–∫–∞', '–ø–ª–∏—Ç–∫–∞', '–∫–µ—Ä–∞–º–æ–≥—Ä–∞–Ω–∏—Ç', '–ª–∞–º–∏–Ω–∞—Ç', '—Å–∫–æ—Ç—á', '—Å—Ç—è–∂–∫–∞', '—Ç—Ä—É–±—ã –ø–≤—Ö', '—Ñ–∞–Ω–µ—Ä–∞', '–≥–∏–ø—Å–æ–∫–∞—Ä—Ç–æ–Ω', '–ø—Ä–æ—Ñ–∏–ª—å', '—à—Ç—É–∫–∞—Ç—É—Ä–∫–∞', '—Å–µ—Ç–∫–∞ –∞—Ä–º–∏—Ä—É—é—â–∞—è', '–ø–ª–∏—Ç–æ—á–Ω—ã–π –∫–ª–µ–π', '–ø–ª–∏–Ω—Ç—É—Å', '–º–µ—à–æ–∫ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π'] },
        { name: '–≠–ª–µ–∫—Ç—Ä–∏–∫–∞', icon: '‚ö°', description: '–ö–∞–±–µ–ª–∏, –≤—ã–∫–ª—é—á–∞—Ç–µ–ª–∏', keywords: ['–∫–∞–±–µ–ª—å', '—Ä–æ–∑–µ—Ç–∫–∞', '–≤—ã–∫–ª—é—á–∞—Ç–µ–ª—å', '—É–¥–ª–∏–Ω–∏—Ç–µ–ª—å'] },
        { name: '–§—É—Ä–Ω–∏—Ç—É—Ä–∞', icon: 'üö™', description: '–ó–∞–º–∫–∏, –ø–µ—Ç–ª–∏', keywords: ['–∑–∞–º–æ–∫', '–ø–µ—Ç–ª–∏'] },
        // –î–æ–±–∞–≤–ª–µ–Ω—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –Ω–æ –±–µ–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ catalog.json
        { name: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞', icon: 'üì±', description: '–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã, –ø–ª–∞–Ω—à–µ—Ç—ã', keywords: [] },
        { name: '–û–¥–µ–∂–¥–∞', icon: 'üëï', description: '–ú–æ–¥–Ω–∞—è –æ–¥–µ–∂–¥–∞', keywords: [] },
        { name: '–ö–Ω–∏–≥–∏', icon: 'üìö', description: '–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∫–Ω–∏–≥–∏', keywords: [] },
        { name: '–î–æ–º', icon: 'üè°', description: '–¢–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–º–∞', keywords: [] },
    ];

    // --- 1. –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ---
    function applyConfig() {
        document.title = config.shopTitle;
        document.getElementById('shop-title').textContent = config.shopTitle;
        const logoImg = document.getElementById('logo-img');
        logoImg.src = config.logoPath;
        logoImg.onerror = () => { logoImg.style.display = 'none'; };
        document.documentElement.style.setProperty('--primary-color', config.primaryColor);
        tg.setHeaderColor(config.primaryColor);
        if (tg.colorScheme === 'dark') {
            document.body.classList.add('telegram-dark-theme');
        }
    }

    // --- 2. –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ ---
    async function loadProducts() {
        try {
            loader.style.display = 'block';
            catalogContainer.style.display = 'none';
            const response = await fetch('catalog.json');
            if (!response.ok) throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞: ${response.statusText}`);
            allProducts = await response.json(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
            renderProducts(allProducts); // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
        } catch (error) {
            console.error(error);
            loader.textContent = '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä—ã.';
        } finally {
            loader.style.display = 'none';
            catalogContainer.style.display = 'grid';
        }
    }

    // --- 3. –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–æ–≤–∞—Ä–æ–≤ ---
    function renderProducts(productsToRender) {
        catalogContainer.innerHTML = ''; // –û—á–∏—â–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥ –ø–µ—Ä–µ–¥ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–æ–º
        if (productsToRender.length === 0) {
            catalogContainer.innerHTML = '<p style="text-align: center; width: 100%; opacity: 0.7;">–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.</p>';
            return;
        }
        productsToRender.forEach(product => {
            const card = createProductCard(product);
            catalogContainer.appendChild(card);
        });
    }

    // --- 4. –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞ ---
    function createProductCard(product) {
        const card = document.createElement('div');
        card.className = 'product-card';
        const formattedPrice = new Intl.NumberFormat('ru-RU', { style: 'currency', currency: 'RUB', minimumFractionDigits: 0 }).format(product.price);
        card.innerHTML = `
            <div class="product-photo">
                <img src="${product.photo}" alt="${product.name}" onerror="this.src='https://placehold.co/600x600?text=–§–æ—Ç–æ';">
            </div>
            <div class="product-details">
                <h3 class="product-name">${product.name}</h3>
                <p class="product-description">${product.description}</p>
                <div class="product-footer">
                    <div class="product-price">${formattedPrice}</div>
                    <button class="add-to-cart-button">–í –∫–æ—Ä–∑–∏–Ω—É</button>
                </div>
            </div>
        `;
        const addToCartButton = card.querySelector('.add-to-cart-button');
        addToCartButton.addEventListener('click', () => {
            addToCart(product);
        });
        return card;
    }
    
    // --- 5. –õ–æ–≥–∏–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã ---
    function addToCart(product) {
        const existingProduct = cart.find(p => p.id === product.id);
        if (existingProduct) {
            existingProduct.quantity += 1;
        } else {
            cart.push({ ...product, quantity: 1 });
        }
        updateCart();
        tg.HapticFeedback.impactOccurred('light');
    }

    function changeQuantity(productId, delta) {
        const product = cart.find(p => p.id === productId);
        if (!product) return;

        product.quantity += delta;

        if (product.quantity <= 0) {
            cart = cart.filter(p => p.id !== productId);
        }
        updateCart();
    }

    function updateCart() {
        const totalItems = cart.reduce((sum, product) => sum + product.quantity, 0);
        cartCounter.textContent = totalItems;
        renderCartItems();
        calculateTotalPrice();
    }

    function renderCartItems() {
        cartItemsContainer.innerHTML = '';
        const orderForm = document.getElementById('order-form');
        const cartSummary = document.querySelector('.cart-summary');

        if (cart.length === 0) {
            cartItemsContainer.innerHTML = '<p style="text-align: center; opacity: 0.7;">–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.</p>';
            orderForm.style.display = 'none';
            cartSummary.style.display = 'none';
            return;
        }
        
        orderForm.style.display = 'block';
        cartSummary.style.display = 'block';

        cart.forEach(product => {
            const itemEl = document.createElement('div');
            itemEl.className = 'cart-item';
            const formattedPrice = new Intl.NumberFormat('ru-RU', { style: 'currency', currency: 'RUB', minimumFractionDigits: 0 }).format(product.price);
            itemEl.innerHTML = `
                <img src="${product.photo}" class="cart-item-img" alt="${product.name}" onerror="this.src='https://placehold.co/600x600?text=–§–æ—Ç–æ';">
                <div class="cart-item-details">
                    <div class="cart-item-name">${product.name}</div>
                    <div class="cart-item-price">${formattedPrice}</div>
                </div>
                <div class="quantity-controls">
                    <button class="quantity-btn" data-product-id="${product.id}" data-delta="-1">-</button>
                    <span class="item-quantity">${product.quantity}</span>
                    <button class="quantity-btn" data-product-id="${product.id}" data-delta="1">+</button>
                </div>
            `;
            cartItemsContainer.appendChild(itemEl);
        });

        document.querySelectorAll('.quantity-btn').forEach(button => {
            button.addEventListener('click', (e) => {
                const productId = parseInt(e.target.dataset.productId, 10); // –ü–∞—Ä—Å–∏–º –≤ —á–∏—Å–ª–æ
                const delta = parseInt(e.target.dataset.delta, 10);
                changeQuantity(productId, delta);
            });
        });
    }

    function calculateTotalPrice() {
        const total = cart.reduce((sum, product) => sum + (product.price * product.quantity), 0);
        const formattedTotal = new Intl.NumberFormat('ru-RU', { style: 'currency', currency: 'RUB', minimumFractionDigits: 0 }).format(total);
        cartTotalPriceEl.textContent = formattedTotal;
    }

    // --- 6. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω—ã–º –æ–∫–Ω–æ–º ---
    cartButton.addEventListener('click', () => {
        cartModal.style.display = 'flex';
        renderCartItems();
    });

    closeCartButton.addEventListener('click', () => {
        cartModal.style.display = 'none';
    });
    
    cartModal.addEventListener('click', (e) => {
        if (e.target === cartModal) {
            cartModal.style.display = 'none';
        }
    });

    // --- 7. –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞ ---
    submitOrderButton.addEventListener('click', () => {
        const customerName = customerNameInput.value.trim(); // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞
        const phone = phoneInput.value.trim();
        const address = addressInput.value.trim();
        const paymentMethod = document.querySelector('input[name="payment-method"]:checked').value; // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã

        if (cart.length === 0) {
            tg.showAlert('–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!');
            return;
        }
        if (!customerName || !phone || !address) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø–æ–ª—è
            tg.showAlert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è: –í–∞—à–µ –∏–º—è, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏.');
            return;
        }

        const orderData = {
            items: cart.map(p => ({ id: p.id, name: p.name, price: p.price, quantity: p.quantity })),
            totalPrice: cart.reduce((sum, p) => sum + (p.price * p.quantity), 0),
            customer: {
                name: customerName, // –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞
                phone: phone,
                address: address,
                paymentMethod: paymentMethod === 'cash' ? '–ù–∞–ª–∏—á–Ω—ã–º–∏' : '–ë–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π' // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
            },
            orderDate: new Date().toISOString()
        };

        tg.sendData(JSON.stringify(orderData));
        tg.showAlert('–î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Telegram!'); // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ tg.showAlert
        // –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –∏ –ø–æ–ª—è —Ñ–æ—Ä–º—ã –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        cart = [];
        updateCart();
        customerNameInput.value = '';
        phoneInput.value = '';
        addressInput.value = '';
        cartModal.style.display = 'none'; // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        tg.close(); // –ó–∞–∫—Ä—ã–≤–∞–µ–º Web App
    });

    // --- 8. –õ–æ–≥–∏–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π ---
    function renderCategories() {
        categoriesContainer.innerHTML = '';
        categories.forEach(category => {
            const button = document.createElement('div');
            button.className = 'category-button';
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å 'active' –¥–ª—è —Ç–µ–∫—É—â–µ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            if (category.name === currentCategory) {
                button.classList.add('active');
            }
            button.innerHTML = `
                <span class="category-icon">${category.icon}</span>
                <span class="category-name">${category.name}</span>
                <span class="category-description">${category.description}</span>
            `;
            button.addEventListener('click', () => {
                filterProductsByCategory(category.name);
                // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –∫–Ω–æ–ø–æ–∫
                document.querySelectorAll('.category-button').forEach(btn => {
                    btn.classList.remove('active');
                });
                button.classList.add('active');
            });
            categoriesContainer.appendChild(button);
        });
    }

    function filterProductsByCategory(categoryName) {
        currentCategory = categoryName; // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        let filtered = [];

        if (categoryName === '–í—Å–µ —Ç–æ–≤–∞—Ä—ã') {
            filtered = allProducts;
        } else {
            const selectedCategory = categories.find(cat => cat.name === categoryName);
            if (selectedCategory && selectedCategory.keywords.length > 0) {
                // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã, –µ—Å–ª–∏ –∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                filtered = allProducts.filter(product => {
                    const productNameLower = product.name.toLowerCase();
                    const productDescriptionLower = product.description.toLowerCase();
                    return selectedCategory.keywords.some(keyword => 
                        productNameLower.includes(keyword.toLowerCase()) || 
                        productDescriptionLower.includes(keyword.toLowerCase())
                    );
                });
            } else {
                // –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –∏–º–µ–µ—Ç –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
                filtered = [];
            }
        }
        renderProducts(filtered); // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
    }


    // --- –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
    applyConfig();
    loadProducts().then(() => {
        renderCategories(); // –†–µ–Ω–¥–µ—Ä–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
        filterProductsByCategory(currentCategory); // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–í—Å–µ —Ç–æ–≤–∞—Ä—ã)
    });
});
