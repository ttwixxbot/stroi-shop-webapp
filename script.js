document.addEventListener('DOMContentLoaded', () => {
    const tg = window.Telegram.WebApp;
    tg.ready();

    // --- DOM –≠–ª–µ–º–µ–Ω—Ç—ã ---
    const categoryCatalog = document.getElementById('category-catalog');
    const productCatalog = document.getElementById('product-catalog');
    const backToCategoriesButton = document.getElementById('back-to-categories');
    const loader = document.getElementById('loader');
    const cartButton = document.getElementById('cart-button');
    const cartCounter = document.getElementById('cart-counter');
    const cartModal = document.getElementById('cart-modal');
    const closeCartButton = document.getElementById('close-cart-button');
    const cartItemsContainer = document.getElementById('cart-items-container');
    const cartTotalPriceEl = document.getElementById('cart-total-price');
    const submitOrderButton = document.getElementById('submit-order-button');
    const nameInput = document.getElementById('name-input'); // –ù–æ–≤–æ–µ –ø–æ–ª–µ
    const phoneInput = document.getElementById('phone-input');
    const addressInput = document.getElementById('address-input');
    const paymentMethodRadios = document.querySelectorAll('input[name="payment-method"]'); // –ù–æ–≤–æ–µ –ø–æ–ª–µ

    // --- –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
    let allProducts = []; // –í—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ catalog.json
    let allCategories = []; // –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ catalog.json
    let cart = []; // –¢–µ–ø–µ—Ä—å –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å –æ–±—ä–µ–∫—Ç—ã { ...product, quantity: N }

    // --- 1. –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ---
    function applyConfig() {
        document.title = config.shopTitle;
        document.getElementById('shop-title').textContent = config.shopTitle;
        const logoImg = document.getElementById('logo-img');
        logoImg.src = config.logoPath;
        logoImg.onerror = () => { logoImg.style.display = 'none'; };
        document.documentElement.style.setProperty('--primary-color', config.primaryColor);
        tg.setHeaderColor(config.primaryColor);
        if (tg.colorScheme === 'dark') {
            document.body.classList.add('telegram-dark-theme');
        }
    }

    // --- 2. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö (–∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ —Ç–æ–≤–∞—Ä–æ–≤) ---
    async function loadData() {
        try {
            loader.style.display = 'block';
            categoryCatalog.style.display = 'none';
            productCatalog.style.display = 'none';
            backToCategoriesButton.style.display = 'none';

            const response = await fetch('catalog.json');
            if (!response.ok) throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞: ${response.statusText}`);
            const data = await response.json();
            allProducts = data.products;
            allCategories = data.categories;

            renderCategories(); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        } catch (error) {
            console.error(error);
            loader.textContent = '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.';
        } finally {
            loader.style.display = 'none';
        }
    }

    // --- 3. –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π ---
    function renderCategories() {
        categoryCatalog.innerHTML = '';
        categoryCatalog.style.display = 'grid';
        productCatalog.style.display = 'none';
        backToCategoriesButton.style.display = 'none';

        allCategories.forEach(category => {
            const card = createCategoryCard(category);
            categoryCatalog.appendChild(card);
        });
    }

    // --- 4. –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ---
    function createCategoryCard(category) {
        const card = document.createElement('div');
        card.className = 'category-card';
        // –ò–∫–æ–Ω–∫–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å—é–¥–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, —Å –ø–æ–º–æ—â—å—é Font Awesome –∏–ª–∏ SVG
        // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –ø–æ–∫–∞ –±–µ–∑ –∏–∫–æ–Ω–æ–∫, –∏–ª–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç–º–æ–¥–∑–∏:
        const icon = getCategoryIcon(category.id);
        card.innerHTML = `
            <div class="category-icon">${icon}</div>
            <h3 class="category-name">${category.name}</h3>
        `;
        card.addEventListener('click', () => {
            showProductsByCategory(category.id);
        });
        return card;
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∫–æ–Ω–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    function getCategoryIcon(categoryId) {
        switch (categoryId) {
            case 'fasteners': return 'üî©'; // –ö—Ä–µ–ø—ë–∂
            case 'paints': return 'üé®'; // –õ–∞–∫–æ–∫—Ä–∞—Å–æ—á–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
            case 'tools': return 'üõ†Ô∏è'; // –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
            case 'flooring': return 'üè†'; // –ù–∞–ø–æ–ª—å–Ω—ã–µ –ø–æ–∫—Ä—ã—Ç–∏—è
            case 'dry_mixes': return 'üß±'; // –°—É—Ö–∏–µ —Å–º–µ—Å–∏
            case 'electrical': return '‚ö°'; // –≠–ª–µ–∫—Ç—Ä–∏–∫–∞
            case 'plumbing': return 'üöø'; // –°–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞
            case 'wood_sheet': return 'ü™µ'; // –î–µ—Ä–µ–≤–æ –∏ –ª–∏—Å—Ç–æ–≤—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
            case 'doors_windows': return 'üö™'; // –î–≤–µ—Ä–∏ –∏ –û–∫–Ω–∞
            default: return 'üì¶'; // –ü—Ä–æ—á–µ–µ
        }
    }

    // --- 5. –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ---
    function showProductsByCategory(categoryId) {
        const productsToShow = allProducts.filter(p => p.category === categoryId);
        productCatalog.innerHTML = ''; // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ç–æ–≤–∞—Ä—ã
        
        categoryCatalog.style.display = 'none'; // –°–∫—Ä—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        productCatalog.style.display = 'grid'; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã
        backToCategoriesButton.style.display = 'block'; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"

        if (productsToShow.length === 0) {
            productCatalog.innerHTML = '<p style="text-align: center; opacity: 0.7; grid-column: 1 / -1;">–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.</p>';
            return;
        }

        productsToShow.forEach(product => {
            const card = createProductCard(product);
            productCatalog.appendChild(card);
        });
    }

    // --- 6. –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞ ---
    function createProductCard(product) {
        const card = document.createElement('div');
        card.className = 'product-card';
        const formattedPrice = new Intl.NumberFormat('ru-RU', { style: 'currency', currency: 'RUB', minimumFractionDigits: 0 }).format(product.price);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–µ —Ç–æ–≤–∞—Ä–∞
        card.innerHTML = `
            <div class="product-photo">
                <img src="${product.photo}" alt="${product.name}" onerror="this.src='https://placehold.co/600x600?text=–§–æ—Ç–æ';">
            </div>
            <div class="product-details">
                <h3 class="product-name">${product.name}</h3>
                <p class="product-description">${product.description}</p>
                <div class="product-footer">
                    <div class="product-price">${formattedPrice}</div>
                    <div class="quantity-controls-card">
                        <button class="quantity-btn-card minus" data-product-id="${product.id}">-</button>
                        <span class="item-quantity-card" id="quantity-card-${product.id}">0</span>
                        <button class="quantity-btn-card plus" data-product-id="${product.id}">+</button>
                    </div>
                    <button class="add-to-cart-button" data-product-id="${product.id}">–í –∫–æ—Ä–∑–∏–Ω—É</button>
                </div>
            </div>
        `;
        
        const addToCartButton = card.querySelector('.add-to-cart-button');
        const quantitySpan = card.querySelector(`#quantity-card-${product.id}`);
        const minusButton = card.querySelector('.quantity-btn-card.minus');
        const plusButton = card.querySelector('.quantity-btn-card.plus');

        let currentQuantity = 0; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —Ç–µ–∫—É—â–µ–π –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞, –µ—Å–ª–∏ —Ç–æ–≤–∞—Ä —É–∂–µ –≤ –∫–æ—Ä–∑–∏–Ω–µ
        const existingProductInCart = cart.find(p => p.id === product.id);
        if (existingProductInCart) {
            currentQuantity = existingProductInCart.quantity;
            quantitySpan.textContent = currentQuantity;
        }

        plusButton.addEventListener('click', () => {
            currentQuantity++;
            quantitySpan.textContent = currentQuantity;
        });

        minusButton.addEventListener('click', () => {
            if (currentQuantity > 0) {
                currentQuantity--;
                quantitySpan.textContent = currentQuantity;
            }
        });

        addToCartButton.addEventListener('click', () => {
            if (currentQuantity > 0) {
                addToCart(product, currentQuantity);
                currentQuantity = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É
                quantitySpan.textContent = currentQuantity;
            } else {
                tg.showAlert('–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É!');
            }
        });
        return card;
    }
    
    // --- 7. –õ–æ–≥–∏–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã ---
    function addToCart(product, quantity) {
        const existingProduct = cart.find(p => p.id === product.id);
        if (existingProduct) {
            existingProduct.quantity += quantity;
        } else {
            cart.push({ ...product, quantity: quantity });
        }
        updateCart();
        tg.HapticFeedback.impactOccurred('light');
        tg.showNotification('success', `–î–æ–±–∞–≤–ª–µ–Ω–æ ${quantity} —à—Ç. ${product.name} –≤ –∫–æ—Ä–∑–∏–Ω—É!`);
    }

    function changeQuantity(productId, delta) {
        const product = cart.find(p => p.id === productId);
        if (!product) return;

        product.quantity += delta;

        if (product.quantity <= 0) {
            cart = cart.filter(p => p.id !== productId);
        }
        updateCart();
    }

    function removeItemFromCart(productId) {
        cart = cart.filter(p => p.id !== productId);
        updateCart();
        tg.HapticFeedback.impactOccurred('light');
    }

    function updateCart() {
        const totalItems = cart.reduce((sum, product) => sum + product.quantity, 0);
        cartCounter.textContent = totalItems;
        renderCartItems();
        calculateTotalPrice();
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏ Telegram
        if (totalItems > 0) {
            tg.MainButton.setText(`–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ (${new Intl.NumberFormat('ru-RU', { style: 'currency', currency: 'RUB', minimumFractionDigits: 0 }).format(calculateTotalPriceRaw())})`);
            tg.MainButton.show();
        } else {
            tg.MainButton.hide();
        }
    }

    function renderCartItems() {
        cartItemsContainer.innerHTML = '';
        const orderForm = document.getElementById('order-form');
        const cartSummary = document.querySelector('.cart-summary');

        if (cart.length === 0) {
            cartItemsContainer.innerHTML = '<p style="text-align: center; opacity: 0.7;">–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.</p>';
            orderForm.style.display = 'none';
            cartSummary.style.display = 'none';
            return;
        }
        
        orderForm.style.display = 'block';
        cartSummary.style.display = 'block';

        cart.forEach(product => {
            const itemEl = document.createElement('div');
            itemEl.className = 'cart-item';
            const formattedPrice = new Intl.NumberFormat('ru-RU', { style: 'currency', currency: 'RUB', minimumFractionDigits: 0 }).format(product.price);
            itemEl.innerHTML = `
                <img src="${product.photo}" class="cart-item-img" alt="${product.name}" onerror="this.src='https://placehold.co/600x600?text=–§–æ—Ç–æ';">
                <div class="cart-item-details">
                    <div class="cart-item-name">${product.name}</div>
                    <div class="cart-item-price">${formattedPrice}</div>
                </div>
                <div class="quantity-controls">
                    <button class="quantity-btn" data-product-id="${product.id}" data-delta="-1">-</button>
                    <span class="item-quantity">${product.quantity}</span>
                    <button class="quantity-btn" data-product-id="${product.id}" data-delta="1">+</button>
                </div>
                <button class="remove-item-btn" data-product-id="${product.id}">üóëÔ∏è</button>
            `;
            cartItemsContainer.appendChild(itemEl);
        });

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏ —É–¥–∞–ª–µ–Ω–∏—è
        cartItemsContainer.querySelectorAll('.quantity-btn').forEach(button => {
            button.addEventListener('click', (e) => {
                const productId = parseInt(e.target.dataset.productId, 10);
                const delta = parseInt(e.target.dataset.delta, 10);
                changeQuantity(productId, delta);
            });
        });

        cartItemsContainer.querySelectorAll('.remove-item-btn').forEach(button => {
            button.addEventListener('click', (e) => {
                const productId = parseInt(e.target.dataset.productId, 10);
                removeItemFromCart(productId);
            });
        });
    }

    function calculateTotalPriceRaw() {
        return cart.reduce((sum, product) => sum + (product.price * product.quantity), 0);
    }

    function calculateTotalPrice() {
        const total = calculateTotalPriceRaw();
        const formattedTotal = new Intl.NumberFormat('ru-RU', { style: 'currency', currency: 'RUB', minimumFractionDigits: 0 }).format(total);
        cartTotalPriceEl.textContent = formattedTotal;
    }

    // --- 8. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω—ã–º –æ–∫–Ω–æ–º ---
    cartButton.addEventListener('click', () => {
        cartModal.style.display = 'flex';
        renderCartItems();
    });

    closeCartButton.addEventListener('click', () => {
        cartModal.style.display = 'none';
    });
    
    cartModal.addEventListener('click', (e) => {
        if (e.target === cartModal) {
            cartModal.style.display = 'none';
        }
    });

    // --- 9. –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞ ---
    submitOrderButton.addEventListener('click', () => {
        sendOrder();
    });

    // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–Ω–æ–ø–∫—É Telegram –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞
    tg.MainButton.onClick(sendOrder);

    function sendOrder() {
        const name = nameInput.value.trim();
        const phone = phoneInput.value.trim();
        const address = addressInput.value.trim();
        let paymentMethod = '';
        paymentMethodRadios.forEach(radio => {
            if (radio.checked) {
                paymentMethod = radio.value;
            }
        });

        if (cart.length === 0) {
            tg.showAlert('–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!');
            return;
        }
        if (!name || !phone || !address) {
            tg.showAlert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è: –í–∞—à–µ –∏–º—è, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏.');
            return;
        }

        const orderData = {
            items: cart.map(p => ({ id: p.id, name: p.name, price: p.price, quantity: p.quantity })),
            totalPrice: calculateTotalPriceRaw(),
            customer: {
                name: name,
                phone: phone,
                address: address,
                paymentMethod: paymentMethod
            },
            orderDate: new Date().toISOString()
        };

        tg.sendData(JSON.stringify(orderData));
        tg.showAlert('–î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Telegram! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.');
        tg.close();
    }

    // --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
    applyConfig();
    loadData();

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"
    backToCategoriesButton.addEventListener('click', () => {
        renderCategories();
    });
});
